/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.utarlington.pigeon.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-02")
public class TEnqueueTaskReservationsRequest implements org.apache.thrift.TBase<TEnqueueTaskReservationsRequest, TEnqueueTaskReservationsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TEnqueueTaskReservationsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEnqueueTaskReservationsRequest");

  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCHEDULER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulerAddress", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("numTasks", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TEnqueueTaskReservationsRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TEnqueueTaskReservationsRequestTupleSchemeFactory();

  public java.lang.String appId; // required
  public TUserGroupInfo user; // required
  public java.lang.String requestId; // required
  public THostPort schedulerAddress; // required
  public int numTasks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_ID((short)1, "appId"),
    USER((short)2, "user"),
    REQUEST_ID((short)3, "requestId"),
    SCHEDULER_ADDRESS((short)4, "schedulerAddress"),
    NUM_TASKS((short)5, "numTasks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_ID
          return APP_ID;
        case 2: // USER
          return USER;
        case 3: // REQUEST_ID
          return REQUEST_ID;
        case 4: // SCHEDULER_ADDRESS
          return SCHEDULER_ADDRESS;
        case 5: // NUM_TASKS
          return NUM_TASKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMTASKS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserGroupInfo.class)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEDULER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("schedulerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THostPort.class)));
    tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("numTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEnqueueTaskReservationsRequest.class, metaDataMap);
  }

  public TEnqueueTaskReservationsRequest() {
  }

  public TEnqueueTaskReservationsRequest(
    java.lang.String appId,
    TUserGroupInfo user,
    java.lang.String requestId,
    THostPort schedulerAddress,
    int numTasks)
  {
    this();
    this.appId = appId;
    this.user = user;
    this.requestId = requestId;
    this.schedulerAddress = schedulerAddress;
    this.numTasks = numTasks;
    setNumTasksIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEnqueueTaskReservationsRequest(TEnqueueTaskReservationsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetUser()) {
      this.user = new TUserGroupInfo(other.user);
    }
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetSchedulerAddress()) {
      this.schedulerAddress = new THostPort(other.schedulerAddress);
    }
    this.numTasks = other.numTasks;
  }

  public TEnqueueTaskReservationsRequest deepCopy() {
    return new TEnqueueTaskReservationsRequest(this);
  }

  @Override
  public void clear() {
    this.appId = null;
    this.user = null;
    this.requestId = null;
    this.schedulerAddress = null;
    setNumTasksIsSet(false);
    this.numTasks = 0;
  }

  public java.lang.String getAppId() {
    return this.appId;
  }

  public TEnqueueTaskReservationsRequest setAppId(java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public TUserGroupInfo getUser() {
    return this.user;
  }

  public TEnqueueTaskReservationsRequest setUser(TUserGroupInfo user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public java.lang.String getRequestId() {
    return this.requestId;
  }

  public TEnqueueTaskReservationsRequest setRequestId(java.lang.String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public THostPort getSchedulerAddress() {
    return this.schedulerAddress;
  }

  public TEnqueueTaskReservationsRequest setSchedulerAddress(THostPort schedulerAddress) {
    this.schedulerAddress = schedulerAddress;
    return this;
  }

  public void unsetSchedulerAddress() {
    this.schedulerAddress = null;
  }

  /** Returns true if field schedulerAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedulerAddress() {
    return this.schedulerAddress != null;
  }

  public void setSchedulerAddressIsSet(boolean value) {
    if (!value) {
      this.schedulerAddress = null;
    }
  }

  public int getNumTasks() {
    return this.numTasks;
  }

  public TEnqueueTaskReservationsRequest setNumTasks(int numTasks) {
    this.numTasks = numTasks;
    setNumTasksIsSet(true);
    return this;
  }

  public void unsetNumTasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMTASKS_ISSET_ID);
  }

  /** Returns true if field numTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNumTasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMTASKS_ISSET_ID);
  }

  public void setNumTasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMTASKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((TUserGroupInfo)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((java.lang.String)value);
      }
      break;

    case SCHEDULER_ADDRESS:
      if (value == null) {
        unsetSchedulerAddress();
      } else {
        setSchedulerAddress((THostPort)value);
      }
      break;

    case NUM_TASKS:
      if (value == null) {
        unsetNumTasks();
      } else {
        setNumTasks((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_ID:
      return getAppId();

    case USER:
      return getUser();

    case REQUEST_ID:
      return getRequestId();

    case SCHEDULER_ADDRESS:
      return getSchedulerAddress();

    case NUM_TASKS:
      return getNumTasks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APP_ID:
      return isSetAppId();
    case USER:
      return isSetUser();
    case REQUEST_ID:
      return isSetRequestId();
    case SCHEDULER_ADDRESS:
      return isSetSchedulerAddress();
    case NUM_TASKS:
      return isSetNumTasks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TEnqueueTaskReservationsRequest)
      return this.equals((TEnqueueTaskReservationsRequest)that);
    return false;
  }

  public boolean equals(TEnqueueTaskReservationsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_schedulerAddress = true && this.isSetSchedulerAddress();
    boolean that_present_schedulerAddress = true && that.isSetSchedulerAddress();
    if (this_present_schedulerAddress || that_present_schedulerAddress) {
      if (!(this_present_schedulerAddress && that_present_schedulerAddress))
        return false;
      if (!this.schedulerAddress.equals(that.schedulerAddress))
        return false;
    }

    boolean this_present_numTasks = true;
    boolean that_present_numTasks = true;
    if (this_present_numTasks || that_present_numTasks) {
      if (!(this_present_numTasks && that_present_numTasks))
        return false;
      if (this.numTasks != that.numTasks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestId()) ? 131071 : 524287);
    if (isSetRequestId())
      hashCode = hashCode * 8191 + requestId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchedulerAddress()) ? 131071 : 524287);
    if (isSetSchedulerAddress())
      hashCode = hashCode * 8191 + schedulerAddress.hashCode();

    hashCode = hashCode * 8191 + numTasks;

    return hashCode;
  }

  @Override
  public int compareTo(TEnqueueTaskReservationsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchedulerAddress()).compareTo(other.isSetSchedulerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedulerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulerAddress, other.schedulerAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumTasks()).compareTo(other.isSetNumTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numTasks, other.numTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TEnqueueTaskReservationsRequest(");
    boolean first = true;

    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schedulerAddress:");
    if (this.schedulerAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.schedulerAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numTasks:");
    sb.append(this.numTasks);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
    if (schedulerAddress != null) {
      schedulerAddress.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEnqueueTaskReservationsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TEnqueueTaskReservationsRequestStandardScheme getScheme() {
      return new TEnqueueTaskReservationsRequestStandardScheme();
    }
  }

  private static class TEnqueueTaskReservationsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TEnqueueTaskReservationsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEnqueueTaskReservationsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new TUserGroupInfo();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCHEDULER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schedulerAddress = new THostPort();
              struct.schedulerAddress.read(iprot);
              struct.setSchedulerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numTasks = iprot.readI32();
              struct.setNumTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEnqueueTaskReservationsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      if (struct.schedulerAddress != null) {
        oprot.writeFieldBegin(SCHEDULER_ADDRESS_FIELD_DESC);
        struct.schedulerAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
      oprot.writeI32(struct.numTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEnqueueTaskReservationsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TEnqueueTaskReservationsRequestTupleScheme getScheme() {
      return new TEnqueueTaskReservationsRequestTupleScheme();
    }
  }

  private static class TEnqueueTaskReservationsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TEnqueueTaskReservationsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEnqueueTaskReservationsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppId()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetRequestId()) {
        optionals.set(2);
      }
      if (struct.isSetSchedulerAddress()) {
        optionals.set(3);
      }
      if (struct.isSetNumTasks()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
      if (struct.isSetSchedulerAddress()) {
        struct.schedulerAddress.write(oprot);
      }
      if (struct.isSetNumTasks()) {
        oprot.writeI32(struct.numTasks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEnqueueTaskReservationsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = new TUserGroupInfo();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.schedulerAddress = new THostPort();
        struct.schedulerAddress.read(iprot);
        struct.setSchedulerAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numTasks = iprot.readI32();
        struct.setNumTasksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

