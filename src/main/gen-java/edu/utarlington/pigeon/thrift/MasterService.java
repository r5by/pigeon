/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.utarlington.pigeon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-20")
public class MasterService {

  public interface Iface {

    public boolean registerBackend(String app, String listenSocket, int type) throws org.apache.thrift.TException;

    public void taskFinished(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker) throws org.apache.thrift.TException;

    public void sendFrontendMessage(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerBackend(String app, String listenSocket, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void taskFinished(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendFrontendMessage(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean registerBackend(String app, String listenSocket, int type) throws org.apache.thrift.TException
    {
      send_registerBackend(app, listenSocket, type);
      return recv_registerBackend();
    }

    public void send_registerBackend(String app, String listenSocket, int type) throws org.apache.thrift.TException
    {
      registerBackend_args args = new registerBackend_args();
      args.setApp(app);
      args.setListenSocket(listenSocket);
      args.setType(type);
      sendBase("registerBackend", args);
    }

    public boolean recv_registerBackend() throws org.apache.thrift.TException
    {
      registerBackend_result result = new registerBackend_result();
      receiveBase(result, "registerBackend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerBackend failed: unknown result");
    }

    public void taskFinished(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker) throws org.apache.thrift.TException
    {
      send_taskFinished(tasks, worker);
      recv_taskFinished();
    }

    public void send_taskFinished(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker) throws org.apache.thrift.TException
    {
      taskFinished_args args = new taskFinished_args();
      args.setTasks(tasks);
      args.setWorker(worker);
      sendBase("taskFinished", args);
    }

    public void recv_taskFinished() throws org.apache.thrift.TException
    {
      taskFinished_result result = new taskFinished_result();
      receiveBase(result, "taskFinished");
      return;
    }

    public void sendFrontendMessage(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message) throws org.apache.thrift.TException
    {
      send_sendFrontendMessage(app, taskId, status, message);
      recv_sendFrontendMessage();
    }

    public void send_sendFrontendMessage(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message) throws org.apache.thrift.TException
    {
      sendFrontendMessage_args args = new sendFrontendMessage_args();
      args.setApp(app);
      args.setTaskId(taskId);
      args.setStatus(status);
      args.setMessage(message);
      sendBase("sendFrontendMessage", args);
    }

    public void recv_sendFrontendMessage() throws org.apache.thrift.TException
    {
      sendFrontendMessage_result result = new sendFrontendMessage_result();
      receiveBase(result, "sendFrontendMessage");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerBackend(String app, String listenSocket, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerBackend_call method_call = new registerBackend_call(app, listenSocket, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerBackend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String app;
      private String listenSocket;
      private int type;
      public registerBackend_call(String app, String listenSocket, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.app = app;
        this.listenSocket = listenSocket;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerBackend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerBackend_args args = new registerBackend_args();
        args.setApp(app);
        args.setListenSocket(listenSocket);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerBackend();
      }
    }

    public void taskFinished(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      taskFinished_call method_call = new taskFinished_call(tasks, worker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class taskFinished_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks;
      private edu.utarlington.pigeon.thrift.THostPort worker;
      public taskFinished_call(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks, edu.utarlington.pigeon.thrift.THostPort worker, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tasks = tasks;
        this.worker = worker;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("taskFinished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        taskFinished_args args = new taskFinished_args();
        args.setTasks(tasks);
        args.setWorker(worker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_taskFinished();
      }
    }

    public void sendFrontendMessage(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendFrontendMessage_call method_call = new sendFrontendMessage_call(app, taskId, status, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendFrontendMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String app;
      private edu.utarlington.pigeon.thrift.TFullTaskId taskId;
      private int status;
      private ByteBuffer message;
      public sendFrontendMessage_call(String app, edu.utarlington.pigeon.thrift.TFullTaskId taskId, int status, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.app = app;
        this.taskId = taskId;
        this.status = status;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendFrontendMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendFrontendMessage_args args = new sendFrontendMessage_args();
        args.setApp(app);
        args.setTaskId(taskId);
        args.setStatus(status);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendFrontendMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerBackend", new registerBackend());
      processMap.put("taskFinished", new taskFinished());
      processMap.put("sendFrontendMessage", new sendFrontendMessage());
      return processMap;
    }

    public static class registerBackend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerBackend_args> {
      public registerBackend() {
        super("registerBackend");
      }

      public registerBackend_args getEmptyArgsInstance() {
        return new registerBackend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerBackend_result getResult(I iface, registerBackend_args args) throws org.apache.thrift.TException {
        registerBackend_result result = new registerBackend_result();
        result.success = iface.registerBackend(args.app, args.listenSocket, args.type);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class taskFinished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, taskFinished_args> {
      public taskFinished() {
        super("taskFinished");
      }

      public taskFinished_args getEmptyArgsInstance() {
        return new taskFinished_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public taskFinished_result getResult(I iface, taskFinished_args args) throws org.apache.thrift.TException {
        taskFinished_result result = new taskFinished_result();
        iface.taskFinished(args.tasks, args.worker);
        return result;
      }
    }

    public static class sendFrontendMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendFrontendMessage_args> {
      public sendFrontendMessage() {
        super("sendFrontendMessage");
      }

      public sendFrontendMessage_args getEmptyArgsInstance() {
        return new sendFrontendMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendFrontendMessage_result getResult(I iface, sendFrontendMessage_args args) throws org.apache.thrift.TException {
        sendFrontendMessage_result result = new sendFrontendMessage_result();
        iface.sendFrontendMessage(args.app, args.taskId, args.status, args.message);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerBackend", new registerBackend());
      processMap.put("taskFinished", new taskFinished());
      processMap.put("sendFrontendMessage", new sendFrontendMessage());
      return processMap;
    }

    public static class registerBackend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerBackend_args, Boolean> {
      public registerBackend() {
        super("registerBackend");
      }

      public registerBackend_args getEmptyArgsInstance() {
        return new registerBackend_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            registerBackend_result result = new registerBackend_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerBackend_result result = new registerBackend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerBackend_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.registerBackend(args.app, args.listenSocket, args.type,resultHandler);
      }
    }

    public static class taskFinished<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, taskFinished_args, Void> {
      public taskFinished() {
        super("taskFinished");
      }

      public taskFinished_args getEmptyArgsInstance() {
        return new taskFinished_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            taskFinished_result result = new taskFinished_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            taskFinished_result result = new taskFinished_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, taskFinished_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.taskFinished(args.tasks, args.worker,resultHandler);
      }
    }

    public static class sendFrontendMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendFrontendMessage_args, Void> {
      public sendFrontendMessage() {
        super("sendFrontendMessage");
      }

      public sendFrontendMessage_args getEmptyArgsInstance() {
        return new sendFrontendMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendFrontendMessage_result result = new sendFrontendMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendFrontendMessage_result result = new sendFrontendMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendFrontendMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendFrontendMessage(args.app, args.taskId, args.status, args.message,resultHandler);
      }
    }

  }

  public static class registerBackend_args implements org.apache.thrift.TBase<registerBackend_args, registerBackend_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerBackend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerBackend_args");

    private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LISTEN_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("listenSocket", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerBackend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerBackend_argsTupleSchemeFactory());
    }

    public String app; // required
    public String listenSocket; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP((short)1, "app"),
      LISTEN_SOCKET((short)2, "listenSocket"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP
            return APP;
          case 2: // LISTEN_SOCKET
            return LISTEN_SOCKET;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LISTEN_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("listenSocket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerBackend_args.class, metaDataMap);
    }

    public registerBackend_args() {
    }

    public registerBackend_args(
      String app,
      String listenSocket,
      int type)
    {
      this();
      this.app = app;
      this.listenSocket = listenSocket;
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBackend_args(registerBackend_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApp()) {
        this.app = other.app;
      }
      if (other.isSetListenSocket()) {
        this.listenSocket = other.listenSocket;
      }
      this.type = other.type;
    }

    public registerBackend_args deepCopy() {
      return new registerBackend_args(this);
    }

    @Override
    public void clear() {
      this.app = null;
      this.listenSocket = null;
      setTypeIsSet(false);
      this.type = 0;
    }

    public String getApp() {
      return this.app;
    }

    public registerBackend_args setApp(String app) {
      this.app = app;
      return this;
    }

    public void unsetApp() {
      this.app = null;
    }

    /** Returns true if field app is set (has been assigned a value) and false otherwise */
    public boolean isSetApp() {
      return this.app != null;
    }

    public void setAppIsSet(boolean value) {
      if (!value) {
        this.app = null;
      }
    }

    public String getListenSocket() {
      return this.listenSocket;
    }

    public registerBackend_args setListenSocket(String listenSocket) {
      this.listenSocket = listenSocket;
      return this;
    }

    public void unsetListenSocket() {
      this.listenSocket = null;
    }

    /** Returns true if field listenSocket is set (has been assigned a value) and false otherwise */
    public boolean isSetListenSocket() {
      return this.listenSocket != null;
    }

    public void setListenSocketIsSet(boolean value) {
      if (!value) {
        this.listenSocket = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public registerBackend_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP:
        if (value == null) {
          unsetApp();
        } else {
          setApp((String)value);
        }
        break;

      case LISTEN_SOCKET:
        if (value == null) {
          unsetListenSocket();
        } else {
          setListenSocket((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP:
        return getApp();

      case LISTEN_SOCKET:
        return getListenSocket();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP:
        return isSetApp();
      case LISTEN_SOCKET:
        return isSetListenSocket();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBackend_args)
        return this.equals((registerBackend_args)that);
      return false;
    }

    public boolean equals(registerBackend_args that) {
      if (that == null)
        return false;

      boolean this_present_app = true && this.isSetApp();
      boolean that_present_app = true && that.isSetApp();
      if (this_present_app || that_present_app) {
        if (!(this_present_app && that_present_app))
          return false;
        if (!this.app.equals(that.app))
          return false;
      }

      boolean this_present_listenSocket = true && this.isSetListenSocket();
      boolean that_present_listenSocket = true && that.isSetListenSocket();
      if (this_present_listenSocket || that_present_listenSocket) {
        if (!(this_present_listenSocket && that_present_listenSocket))
          return false;
        if (!this.listenSocket.equals(that.listenSocket))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_app = true && (isSetApp());
      list.add(present_app);
      if (present_app)
        list.add(app);

      boolean present_listenSocket = true && (isSetListenSocket());
      list.add(present_listenSocket);
      if (present_listenSocket)
        list.add(listenSocket);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerBackend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListenSocket()).compareTo(other.isSetListenSocket());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListenSocket()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listenSocket, other.listenSocket);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerBackend_args(");
      boolean first = true;

      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listenSocket:");
      if (this.listenSocket == null) {
        sb.append("null");
      } else {
        sb.append(this.listenSocket);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerBackend_argsStandardSchemeFactory implements SchemeFactory {
      public registerBackend_argsStandardScheme getScheme() {
        return new registerBackend_argsStandardScheme();
      }
    }

    private static class registerBackend_argsStandardScheme extends StandardScheme<registerBackend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerBackend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.app = iprot.readString();
                struct.setAppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LISTEN_SOCKET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.listenSocket = iprot.readString();
                struct.setListenSocketIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerBackend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.app != null) {
          oprot.writeFieldBegin(APP_FIELD_DESC);
          oprot.writeString(struct.app);
          oprot.writeFieldEnd();
        }
        if (struct.listenSocket != null) {
          oprot.writeFieldBegin(LISTEN_SOCKET_FIELD_DESC);
          oprot.writeString(struct.listenSocket);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerBackend_argsTupleSchemeFactory implements SchemeFactory {
      public registerBackend_argsTupleScheme getScheme() {
        return new registerBackend_argsTupleScheme();
      }
    }

    private static class registerBackend_argsTupleScheme extends TupleScheme<registerBackend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerBackend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApp()) {
          optionals.set(0);
        }
        if (struct.isSetListenSocket()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApp()) {
          oprot.writeString(struct.app);
        }
        if (struct.isSetListenSocket()) {
          oprot.writeString(struct.listenSocket);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerBackend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.app = iprot.readString();
          struct.setAppIsSet(true);
        }
        if (incoming.get(1)) {
          struct.listenSocket = iprot.readString();
          struct.setListenSocketIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class registerBackend_result implements org.apache.thrift.TBase<registerBackend_result, registerBackend_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerBackend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerBackend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerBackend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerBackend_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerBackend_result.class, metaDataMap);
    }

    public registerBackend_result() {
    }

    public registerBackend_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBackend_result(registerBackend_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registerBackend_result deepCopy() {
      return new registerBackend_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registerBackend_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBackend_result)
        return this.equals((registerBackend_result)that);
      return false;
    }

    public boolean equals(registerBackend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerBackend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerBackend_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerBackend_resultStandardSchemeFactory implements SchemeFactory {
      public registerBackend_resultStandardScheme getScheme() {
        return new registerBackend_resultStandardScheme();
      }
    }

    private static class registerBackend_resultStandardScheme extends StandardScheme<registerBackend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerBackend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerBackend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerBackend_resultTupleSchemeFactory implements SchemeFactory {
      public registerBackend_resultTupleScheme getScheme() {
        return new registerBackend_resultTupleScheme();
      }
    }

    private static class registerBackend_resultTupleScheme extends TupleScheme<registerBackend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerBackend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerBackend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class taskFinished_args implements org.apache.thrift.TBase<taskFinished_args, taskFinished_args._Fields>, java.io.Serializable, Cloneable, Comparable<taskFinished_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("taskFinished_args");

    private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField WORKER_FIELD_DESC = new org.apache.thrift.protocol.TField("worker", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new taskFinished_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new taskFinished_argsTupleSchemeFactory());
    }

    public List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks; // required
    public edu.utarlington.pigeon.thrift.THostPort worker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASKS((short)1, "tasks"),
      WORKER((short)2, "worker");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASKS
            return TASKS;
          case 2: // WORKER
            return WORKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.utarlington.pigeon.thrift.TFullTaskId.class))));
      tmpMap.put(_Fields.WORKER, new org.apache.thrift.meta_data.FieldMetaData("worker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.utarlington.pigeon.thrift.THostPort.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(taskFinished_args.class, metaDataMap);
    }

    public taskFinished_args() {
    }

    public taskFinished_args(
      List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks,
      edu.utarlington.pigeon.thrift.THostPort worker)
    {
      this();
      this.tasks = tasks;
      this.worker = worker;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public taskFinished_args(taskFinished_args other) {
      if (other.isSetTasks()) {
        List<edu.utarlington.pigeon.thrift.TFullTaskId> __this__tasks = new ArrayList<edu.utarlington.pigeon.thrift.TFullTaskId>(other.tasks.size());
        for (edu.utarlington.pigeon.thrift.TFullTaskId other_element : other.tasks) {
          __this__tasks.add(new edu.utarlington.pigeon.thrift.TFullTaskId(other_element));
        }
        this.tasks = __this__tasks;
      }
      if (other.isSetWorker()) {
        this.worker = new edu.utarlington.pigeon.thrift.THostPort(other.worker);
      }
    }

    public taskFinished_args deepCopy() {
      return new taskFinished_args(this);
    }

    @Override
    public void clear() {
      this.tasks = null;
      this.worker = null;
    }

    public int getTasksSize() {
      return (this.tasks == null) ? 0 : this.tasks.size();
    }

    public java.util.Iterator<edu.utarlington.pigeon.thrift.TFullTaskId> getTasksIterator() {
      return (this.tasks == null) ? null : this.tasks.iterator();
    }

    public void addToTasks(edu.utarlington.pigeon.thrift.TFullTaskId elem) {
      if (this.tasks == null) {
        this.tasks = new ArrayList<edu.utarlington.pigeon.thrift.TFullTaskId>();
      }
      this.tasks.add(elem);
    }

    public List<edu.utarlington.pigeon.thrift.TFullTaskId> getTasks() {
      return this.tasks;
    }

    public taskFinished_args setTasks(List<edu.utarlington.pigeon.thrift.TFullTaskId> tasks) {
      this.tasks = tasks;
      return this;
    }

    public void unsetTasks() {
      this.tasks = null;
    }

    /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
    public boolean isSetTasks() {
      return this.tasks != null;
    }

    public void setTasksIsSet(boolean value) {
      if (!value) {
        this.tasks = null;
      }
    }

    public edu.utarlington.pigeon.thrift.THostPort getWorker() {
      return this.worker;
    }

    public taskFinished_args setWorker(edu.utarlington.pigeon.thrift.THostPort worker) {
      this.worker = worker;
      return this;
    }

    public void unsetWorker() {
      this.worker = null;
    }

    /** Returns true if field worker is set (has been assigned a value) and false otherwise */
    public boolean isSetWorker() {
      return this.worker != null;
    }

    public void setWorkerIsSet(boolean value) {
      if (!value) {
        this.worker = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASKS:
        if (value == null) {
          unsetTasks();
        } else {
          setTasks((List<edu.utarlington.pigeon.thrift.TFullTaskId>)value);
        }
        break;

      case WORKER:
        if (value == null) {
          unsetWorker();
        } else {
          setWorker((edu.utarlington.pigeon.thrift.THostPort)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASKS:
        return getTasks();

      case WORKER:
        return getWorker();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASKS:
        return isSetTasks();
      case WORKER:
        return isSetWorker();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof taskFinished_args)
        return this.equals((taskFinished_args)that);
      return false;
    }

    public boolean equals(taskFinished_args that) {
      if (that == null)
        return false;

      boolean this_present_tasks = true && this.isSetTasks();
      boolean that_present_tasks = true && that.isSetTasks();
      if (this_present_tasks || that_present_tasks) {
        if (!(this_present_tasks && that_present_tasks))
          return false;
        if (!this.tasks.equals(that.tasks))
          return false;
      }

      boolean this_present_worker = true && this.isSetWorker();
      boolean that_present_worker = true && that.isSetWorker();
      if (this_present_worker || that_present_worker) {
        if (!(this_present_worker && that_present_worker))
          return false;
        if (!this.worker.equals(that.worker))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tasks = true && (isSetTasks());
      list.add(present_tasks);
      if (present_tasks)
        list.add(tasks);

      boolean present_worker = true && (isSetWorker());
      list.add(present_worker);
      if (present_worker)
        list.add(worker);

      return list.hashCode();
    }

    @Override
    public int compareTo(taskFinished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTasks()).compareTo(other.isSetTasks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTasks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorker()).compareTo(other.isSetWorker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker, other.worker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("taskFinished_args(");
      boolean first = true;

      sb.append("tasks:");
      if (this.tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.tasks);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("worker:");
      if (this.worker == null) {
        sb.append("null");
      } else {
        sb.append(this.worker);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (worker != null) {
        worker.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class taskFinished_argsStandardSchemeFactory implements SchemeFactory {
      public taskFinished_argsStandardScheme getScheme() {
        return new taskFinished_argsStandardScheme();
      }
    }

    private static class taskFinished_argsStandardScheme extends StandardScheme<taskFinished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, taskFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.tasks = new ArrayList<edu.utarlington.pigeon.thrift.TFullTaskId>(_list10.size);
                  edu.utarlington.pigeon.thrift.TFullTaskId _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = new edu.utarlington.pigeon.thrift.TFullTaskId();
                    _elem11.read(iprot);
                    struct.tasks.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setTasksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORKER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.worker = new edu.utarlington.pigeon.thrift.THostPort();
                struct.worker.read(iprot);
                struct.setWorkerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, taskFinished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tasks != null) {
          oprot.writeFieldBegin(TASKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tasks.size()));
            for (edu.utarlington.pigeon.thrift.TFullTaskId _iter13 : struct.tasks)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.worker != null) {
          oprot.writeFieldBegin(WORKER_FIELD_DESC);
          struct.worker.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class taskFinished_argsTupleSchemeFactory implements SchemeFactory {
      public taskFinished_argsTupleScheme getScheme() {
        return new taskFinished_argsTupleScheme();
      }
    }

    private static class taskFinished_argsTupleScheme extends TupleScheme<taskFinished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, taskFinished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTasks()) {
          optionals.set(0);
        }
        if (struct.isSetWorker()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTasks()) {
          {
            oprot.writeI32(struct.tasks.size());
            for (edu.utarlington.pigeon.thrift.TFullTaskId _iter14 : struct.tasks)
            {
              _iter14.write(oprot);
            }
          }
        }
        if (struct.isSetWorker()) {
          struct.worker.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, taskFinished_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tasks = new ArrayList<edu.utarlington.pigeon.thrift.TFullTaskId>(_list15.size);
            edu.utarlington.pigeon.thrift.TFullTaskId _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = new edu.utarlington.pigeon.thrift.TFullTaskId();
              _elem16.read(iprot);
              struct.tasks.add(_elem16);
            }
          }
          struct.setTasksIsSet(true);
        }
        if (incoming.get(1)) {
          struct.worker = new edu.utarlington.pigeon.thrift.THostPort();
          struct.worker.read(iprot);
          struct.setWorkerIsSet(true);
        }
      }
    }

  }

  public static class taskFinished_result implements org.apache.thrift.TBase<taskFinished_result, taskFinished_result._Fields>, java.io.Serializable, Cloneable, Comparable<taskFinished_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("taskFinished_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new taskFinished_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new taskFinished_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(taskFinished_result.class, metaDataMap);
    }

    public taskFinished_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public taskFinished_result(taskFinished_result other) {
    }

    public taskFinished_result deepCopy() {
      return new taskFinished_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof taskFinished_result)
        return this.equals((taskFinished_result)that);
      return false;
    }

    public boolean equals(taskFinished_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(taskFinished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("taskFinished_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class taskFinished_resultStandardSchemeFactory implements SchemeFactory {
      public taskFinished_resultStandardScheme getScheme() {
        return new taskFinished_resultStandardScheme();
      }
    }

    private static class taskFinished_resultStandardScheme extends StandardScheme<taskFinished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, taskFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, taskFinished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class taskFinished_resultTupleSchemeFactory implements SchemeFactory {
      public taskFinished_resultTupleScheme getScheme() {
        return new taskFinished_resultTupleScheme();
      }
    }

    private static class taskFinished_resultTupleScheme extends TupleScheme<taskFinished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, taskFinished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, taskFinished_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendFrontendMessage_args implements org.apache.thrift.TBase<sendFrontendMessage_args, sendFrontendMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendFrontendMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendFrontendMessage_args");

    private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendFrontendMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendFrontendMessage_argsTupleSchemeFactory());
    }

    public String app; // required
    public edu.utarlington.pigeon.thrift.TFullTaskId taskId; // required
    public int status; // required
    public ByteBuffer message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP((short)1, "app"),
      TASK_ID((short)2, "taskId"),
      STATUS((short)3, "status"),
      MESSAGE((short)4, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP
            return APP;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // STATUS
            return STATUS;
          case 4: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.utarlington.pigeon.thrift.TFullTaskId.class)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendFrontendMessage_args.class, metaDataMap);
    }

    public sendFrontendMessage_args() {
    }

    public sendFrontendMessage_args(
      String app,
      edu.utarlington.pigeon.thrift.TFullTaskId taskId,
      int status,
      ByteBuffer message)
    {
      this();
      this.app = app;
      this.taskId = taskId;
      this.status = status;
      setStatusIsSet(true);
      this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendFrontendMessage_args(sendFrontendMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApp()) {
        this.app = other.app;
      }
      if (other.isSetTaskId()) {
        this.taskId = new edu.utarlington.pigeon.thrift.TFullTaskId(other.taskId);
      }
      this.status = other.status;
      if (other.isSetMessage()) {
        this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
      }
    }

    public sendFrontendMessage_args deepCopy() {
      return new sendFrontendMessage_args(this);
    }

    @Override
    public void clear() {
      this.app = null;
      this.taskId = null;
      setStatusIsSet(false);
      this.status = 0;
      this.message = null;
    }

    public String getApp() {
      return this.app;
    }

    public sendFrontendMessage_args setApp(String app) {
      this.app = app;
      return this;
    }

    public void unsetApp() {
      this.app = null;
    }

    /** Returns true if field app is set (has been assigned a value) and false otherwise */
    public boolean isSetApp() {
      return this.app != null;
    }

    public void setAppIsSet(boolean value) {
      if (!value) {
        this.app = null;
      }
    }

    public edu.utarlington.pigeon.thrift.TFullTaskId getTaskId() {
      return this.taskId;
    }

    public sendFrontendMessage_args setTaskId(edu.utarlington.pigeon.thrift.TFullTaskId taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public sendFrontendMessage_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public byte[] getMessage() {
      setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
      return message == null ? null : message.array();
    }

    public ByteBuffer bufferForMessage() {
      return org.apache.thrift.TBaseHelper.copyBinary(message);
    }

    public sendFrontendMessage_args setMessage(byte[] message) {
      this.message = message == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(message, message.length));
      return this;
    }

    public sendFrontendMessage_args setMessage(ByteBuffer message) {
      this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP:
        if (value == null) {
          unsetApp();
        } else {
          setApp((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((edu.utarlington.pigeon.thrift.TFullTaskId)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP:
        return getApp();

      case TASK_ID:
        return getTaskId();

      case STATUS:
        return getStatus();

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP:
        return isSetApp();
      case TASK_ID:
        return isSetTaskId();
      case STATUS:
        return isSetStatus();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendFrontendMessage_args)
        return this.equals((sendFrontendMessage_args)that);
      return false;
    }

    public boolean equals(sendFrontendMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_app = true && this.isSetApp();
      boolean that_present_app = true && that.isSetApp();
      if (this_present_app || that_present_app) {
        if (!(this_present_app && that_present_app))
          return false;
        if (!this.app.equals(that.app))
          return false;
      }

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_app = true && (isSetApp());
      list.add(present_app);
      if (present_app)
        list.add(app);

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendFrontendMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendFrontendMessage_args(");
      boolean first = true;

      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.message, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskId != null) {
        taskId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendFrontendMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendFrontendMessage_argsStandardScheme getScheme() {
        return new sendFrontendMessage_argsStandardScheme();
      }
    }

    private static class sendFrontendMessage_argsStandardScheme extends StandardScheme<sendFrontendMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendFrontendMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.app = iprot.readString();
                struct.setAppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskId = new edu.utarlington.pigeon.thrift.TFullTaskId();
                struct.taskId.read(iprot);
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readBinary();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendFrontendMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.app != null) {
          oprot.writeFieldBegin(APP_FIELD_DESC);
          oprot.writeString(struct.app);
          oprot.writeFieldEnd();
        }
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          struct.taskId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeBinary(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendFrontendMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendFrontendMessage_argsTupleScheme getScheme() {
        return new sendFrontendMessage_argsTupleScheme();
      }
    }

    private static class sendFrontendMessage_argsTupleScheme extends TupleScheme<sendFrontendMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendFrontendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApp()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        if (struct.isSetMessage()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApp()) {
          oprot.writeString(struct.app);
        }
        if (struct.isSetTaskId()) {
          struct.taskId.write(oprot);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetMessage()) {
          oprot.writeBinary(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendFrontendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.app = iprot.readString();
          struct.setAppIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = new edu.utarlington.pigeon.thrift.TFullTaskId();
          struct.taskId.read(iprot);
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.message = iprot.readBinary();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class sendFrontendMessage_result implements org.apache.thrift.TBase<sendFrontendMessage_result, sendFrontendMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendFrontendMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendFrontendMessage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendFrontendMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendFrontendMessage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendFrontendMessage_result.class, metaDataMap);
    }

    public sendFrontendMessage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendFrontendMessage_result(sendFrontendMessage_result other) {
    }

    public sendFrontendMessage_result deepCopy() {
      return new sendFrontendMessage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendFrontendMessage_result)
        return this.equals((sendFrontendMessage_result)that);
      return false;
    }

    public boolean equals(sendFrontendMessage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendFrontendMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendFrontendMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendFrontendMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendFrontendMessage_resultStandardScheme getScheme() {
        return new sendFrontendMessage_resultStandardScheme();
      }
    }

    private static class sendFrontendMessage_resultStandardScheme extends StandardScheme<sendFrontendMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendFrontendMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendFrontendMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendFrontendMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendFrontendMessage_resultTupleScheme getScheme() {
        return new sendFrontendMessage_resultTupleScheme();
      }
    }

    private static class sendFrontendMessage_resultTupleScheme extends TupleScheme<sendFrontendMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendFrontendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendFrontendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
